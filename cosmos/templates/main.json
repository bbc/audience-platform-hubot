{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "Environment": {
      "Type": "String",
      "AllowedValues": ["test", "live"],
      "Description": "Cosmos environments - skip Int, use Test or Live"
    },
    "PublicSubnet1Id": {
      "Type": "String",
      "Description": "The ID of Public Subnet 1"
    },
    "PublicSubnet2Id": {
      "Type": "String",
      "Description": "The ID of Public Subnet 2"
    },
    "PublicSubnet3Id": {
      "Type": "String",
      "Description": "The ID of Public Subnet 3"
    },
    "PrivateSubnet1Id": {
      "Type": "String",
      "Description": "The ID of Private Subnet 1"
    },
    "PrivateSubnet2Id": {
      "Type": "String",
      "Description": "The ID of Private Subnet 2"
    },
    "PrivateSubnet3Id": {
      "Type": "String",
      "Description": "The ID of Private Subnet 3"
    },
    "VpcId": {
      "Type": "String",
      "Description": "ID of the VPC to attach to"
    },
    "UpdateMinInService": {
      "Default": "0",
      "Type": "String",
      "Description": "The minimum number of instances in service for Autoscaling updates"
    },
    "UpdateMaxBatchSize": {
      "Default": "1",
      "Type": "String",
      "Description": "The maximum number of instances to be killed at one time during an ASG update."
    },
    "UpdatePauseTime": {
      "Default": "PT0S",
      "Type": "String",
      "Description": "Waiting time for rolling updates to the Autoscaling Group"
    },
    "ImageId": {
      "Type": "String",
      "Description": "The AMI to use"
    },
    "MaxSize": {
      "Default": "2",
      "Type": "String",
      "Description": "Maximum number of instances"
    },
    "MinSize": {
      "Default": "1",
      "Type": "String",
      "Description": "Minimum number of instances"
    },
    "DesiredCapacity": {
      "Default": "1",
      "Type": "String",
      "Description": "Desired number of instances"
    },
    "KeyName": {
      "Type": "String",
      "Default": "cosmos",
      "Description": "The IAM keypair used to connect to instances"
    },
    "InstanceType": {
      "Default": "t2.nano",
      "Type": "String",
      "Description": "The target instance type"
    },
    "CnameEntry": {
      "Type": "String",
      "Description": "Component CNAME entry"
    },
    "DomainNameBase": {
      "Type": "String",
      "Description": "Base domain name (ending with a '.') under which new DNS entries are added"
    },
    "ComponentName": {
      "Type": "String",
      "Description": "The name of the Cosmos component"
    },
    "BastionAccessSecurityGroup": {
      "Type": "String",
      "Description": "The security group that allows access from the bastions"
    }
  },
  "Description": "An AutoScaling infrastructure for Hubot",
  "Resources": {
    "LoadBalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "SecurityGroupIngress": [
          {
            "ToPort": "80",
            "IpProtocol": "tcp",
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        },
        "GroupDescription": "Security Group allowing access only to and from the component's ELB"
      }
    },
    "ComponentLaunchConfiguration": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "EbsOptimized" : false,
        "IamInstanceProfile" : {
          "Ref": "ComponentInstanceProfile"
        },
        "ImageId" : {
          "Ref": "ImageId"
        },
        "InstanceType" : {
          "Ref": "InstanceType"
        },
        "KeyName" : {
          "Ref": "KeyName"
        },
        "SecurityGroups" : [
          {
            "Ref": "BastionAccessSecurityGroup"
          },
          {
            "Ref": "ComponentSecurityGroup"
          }
        ]
      }
    },
    "ComponentScalingPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : {
          "Ref": "ComponentAutoScalingGroup"
        }
      }
    },
    "ComponentAutoScalingGroup": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": {
            "Ref": "UpdatePauseTime"
          },
          "MaxBatchSize": {
            "Ref": "UpdateMaxBatchSize"
          },
          "MinInstancesInService": {
            "Ref": "UpdateMinInService"
          }
        }
      },
      "Properties" : {
        "AvailabilityZones" : [
          "eu-west-1a",
          "eu-west-1b",
          "eu-west-1c"
        ],
        "DesiredCapacity" : {
          "Ref": "DesiredCapacity"
        },
        "LaunchConfigurationName" : {
          "Ref": "ComponentLaunchConfiguration"
        },
        "LoadBalancerNames" : [
          {
            "Ref": "ComponentElasticLoadBalancer"
          }
        ],
        "MaxSize" : {
          "Ref": "MaxSize"
        },
        "MinSize" : {
          "Ref": "MinSize"
        },
        "Tags" : [
          {
            "PropagateAtLaunch": true,
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "Environment"
                  },
                  "audience-platform-hubot"
                ]
              ]
            }
          },
          {
            "PropagateAtLaunch": true,
            "Key": "BBCComponent",
            "Value": "audience-platform-hubot"
          },
          {
            "PropagateAtLaunch": true,
            "Key": "BBCEnvironment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ],
        "VPCZoneIdentifier" : [
          {
            "Ref": "PrivateSubnet1Id"
          },
          {
            "Ref": "PrivateSubnet2Id"
          },
          {
            "Ref": "PrivateSubnet3Id"
          }
        ]
      }
    },
    "ComponentElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "ConnectionDrainingPolicy" : {
          "Enabled": true,
          "Timeout": 20
        },
        "ConnectionSettings" : {
          "IdleTimeout": 10
        },
        "CrossZone" : true,
        "HealthCheck" : {
          "HealthyThreshold": "3",
          "Interval": "15",
          "Target": "TCP:8080",
          "Timeout": "10",
          "UnhealthyThreshold": "3"
        },
        "Listeners" : [
          {
            "InstancePort": "8080",
            "LoadBalancerPort": "80",
            "Protocol": "http",
            "InstanceProtocol": "http"
          }
        ],
        "SecurityGroups" : [
          {
            "Ref": "LoadBalancerSecurityGroup"
          }
        ],
        "Subnets" : [
          {
            "Ref": "PublicSubnet1Id"
          },
          {
            "Ref": "PublicSubnet2Id"
          },
          {
            "Ref": "PublicSubnet3Id"
          }
        ]
      }
    },
    "ComponentDNS": {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : {
          "Ref": "DomainNameBase"
        },
        "Name" : {
          "Fn::Joiin": [
            ".",
            [
              {
                "Ref": "CnameEntry"
              },
              {
                "Ref": "DomainNameBase"
              }
            ]
          ]
        },
        "ResourceRecords" : [
          {
            "Fn::GetAtt": [
              "ComponentElasticLoadBalancer",
              "DNSName"
            ]
          }
        ],
        "TTL" : "60",
        "Type" : "CNAME"
      }
    },
    "ComponentInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ComponentRole"
          }
        ]
      }
    },
    "ComponentRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
            ]
          },
        "Path": "/"
      }
    },
    "ComponentPolicy": {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyDocument" : {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Resource": [
                "*"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "PolicyName" : "ComponentPolicy",
        "Roles" : [
          {
            "Ref": "ComponentRole"
          }
        ]
      }
    },
    "ComponentSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "A component security group allowing access only from the corresponding ELB",
        "SecurityGroupIngress" : [
          {
            "ToPort": "8080",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "FromPort": "8080"
          },
          {
            "ToPort": "123",
            "IpProtocol": "udp",
            "SourceSecurityGroupId": {
              "Ref": "LoadBalancerSecurityGroup"
            },
            "FromPort": "123"
            }
          ],
          "VpcId" : {
            "Ref": "VpcId"
          }
      }
    }
  }
}
